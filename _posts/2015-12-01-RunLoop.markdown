---
layout: post
title:  RunLoop
date:   2015-12-01-06:33:19
categories: jekyll update
---

	## Section 1. RunLoop 过程##

	0. __CFRunLoopFindMode, 查询当前mode, 如果为空(__CFRunLoopModeIsEmpty), 那么直接退出loop

	1. __CFRunLoopDoObservers, 通知 Observer, 即将进入 Loop

	---------------------------------------------------  //以下是循环体

	2. __CFRunLoopDoObservers, 通知 Observer, 即将触发 Timer 回调(kCFRunLoopBeforeTimers)
	3. __CFRunLoopDoObservers, 通知 Observer, 即将触发 Source0(非port) 回调(kCFRunLoopBeforeSources)

	3.1 __CFRunLoopDoBlocks, 执行block

	4. __CFRunLoopDoSources0, 触发 Source0(非port) 回调

	4.1 __CFRunLoopDoBlocks, 执行block

	5. __CFRunLoopServiceMachPort, 如果有 Source1(基于port) 消息, 那么跳到 9 处理消息
	6. __CFRunLoopDoObservers, Source0 处理完毕通知 Observer, 即将休眠(kCFRunLoopBeforeWaiting)

	-------------------------
	7. __CFRunLoopServiceMachPort, 休眠中...调用 mach_msg(msg, MACH_RCV_MSG, port)等待被消息唤醒 
	(a. 基于port的Source1消息)
	(b. 计时器消息)
	(c. 分发至主线程消息)
	-------------------------

	8. __CFRunLoopDoObservers, 通知 Observer, 刚被唤醒(kCFRunLoopAfterWaiting)

	9. 处理消息 
	(a. __CFRunLoopDoTimers, 如果消息是计时器, 那么触发它的回调)
	(b. __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg), 如果消息是到主线程的分发, 那么执行block)
	(c. __CFRunLoopDoSource1, 如果消息是 Source1, 那么触发回调, 处理完毕调用 mach_msg(reply, MACH_SEND_MSG, reply)发送消息至 Source1的 发起端口)

	9.1 __CFRunLoopDoBlocks, 执行block

	10. 结束loop
	(a. 进入loop时指定处理完事件就返回, kCFRunLoopRunHandledSource)
	(b. 超出进入loop时指定的超时时间, kCFRunLoopRunTimedOut)
	(c. __CFRunLoopIsStopped, 被外部调用者强制停止, kCFRunLoopRunStopped)
	(d. __CFRunLoopModeIsEmpty, mode为空, 即source/timer/observer一个都没有了)

	如果不是以上情况, 那么loop继续....

	--------------------------------------------------

	10. __CFRunLoopDoObservers, 通知 Observer, 即将退出 Loop

	////////////////////////////////////////////////////////////////////////////////////




	## Section 2. RunLoop 实现##

	/// 用DefaultMode启动
	void CFRunLoopRun(void) {
	    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);
	}
	 
	/// 用指定的Mode启动，允许设置RunLoop超时时间
	int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {
	    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
	}
	 
	/// RunLoop的实现
	int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {
	    
	    /// 首先根据modeName找到对应mode
	    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);
	    /// 如果mode里没有source/timer/observer, 直接返回。
	    if (__CFRunLoopModeIsEmpty(currentMode)) return;
	    
	    /// 1. 通知 Observers: RunLoop 即将进入 loop。
	    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);
	    
	    /// 内部函数，进入loop
	    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {
	        
	        Boolean sourceHandledThisLoop = NO;
	        int retVal = 0;
	        do {
	 
	            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。
	            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);
	            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。
	            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);
	            /// 执行被加入的block
	            __CFRunLoopDoBlocks(runloop, currentMode);
	            
	            /// 4. RunLoop 触发 Source0 (非port) 回调。
	            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);
	            /// 执行被加入的block
	            __CFRunLoopDoBlocks(runloop, currentMode);
	 
	            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。
	            if (__Source0DidDispatchPortLastTime) {
	                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &msg)
	                if (hasMsg) goto handle_msg;
	            }
	            
	            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。
	            if (sourceHandledThisLoop) {
	                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);
	            }
	            
	            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。
	            /// • 一个基于 port 的Source 的事件。
	            /// • 一个 Timer 到时间了
	            /// • RunLoop 自身的超时时间到了
	            /// • 被其他什么调用者手动唤醒

	            //这里会一直休眠 直到被唤醒 .................................................

	            __CFRunLoopServiceMachPort(waitSet, &msg, sizeof(msg_buffer), &livePort) {
	                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg
	            }
	 
	            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。
	            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);
	            
	            /// 收到消息，处理消息。
	            handle_msg:
	 
	            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。
	            if (msg_is_timer) {
	                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())
	            } 
	 
	            /// 9.2 如果有dispatch到main_queue的block，执行block。
	            else if (msg_is_dispatch) {
	                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);
	            } 
	 
	            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件
	            else {
	                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);
	                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);
	                if (sourceHandledThisLoop) {
	                    mach_msg(reply, MACH_SEND_MSG, reply);
	                }
	            }
	            
	            /// 执行加入到Loop的block
	            __CFRunLoopDoBlocks(runloop, currentMode);
	            
	 
	            if (sourceHandledThisLoop && stopAfterHandle) {
	                /// 进入loop时参数说处理完事件就返回。
	                retVal = kCFRunLoopRunHandledSource;
	            } else if (timeout) {
	                /// 超出传入参数标记的超时时间了
	                retVal = kCFRunLoopRunTimedOut;
	            } else if (__CFRunLoopIsStopped(runloop)) {
	                /// 被外部调用者强制停止了
	                retVal = kCFRunLoopRunStopped;
	            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {
	                /// source/timer/observer一个都没有了
	                retVal = kCFRunLoopRunFinished;
	            }
	            
	            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。
	        } while (retVal == 0);
	    }
	    
	    /// 10. 通知 Observers: RunLoop 即将退出。
	    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);
	}


	////////////////////////////////////////////////////////////////////////////////////

	## Section 3. App 启动之后的 RunLoop 状态

	CFRunLoop {
	    current mode = kCFRunLoopDefaultMode
	    common modes = {
	        UITrackingRunLoopMode
	        kCFRunLoopDefaultMode
	    }
	 
	    common mode items = {
	 
	        // source0 (manual)
	        CFRunLoopSource {order =-1, {
	            callout = _UIApplicationHandleEventQueue}}
	        CFRunLoopSource {order =-1, {
	            callout = PurpleEventSignalCallback }}
	        CFRunLoopSource {order = 0, {
	            callout = FBSSerialQueueRunLoopSourceHandler}}
	 
	        // source1 (mach port)
	        CFRunLoopSource {order = 0,  {port = 17923}}
	        CFRunLoopSource {order = 0,  {port = 12039}}
	        CFRunLoopSource {order = 0,  {port = 16647}}
	        CFRunLoopSource {order =-1, {
	            callout = PurpleEventCallback}}
	        CFRunLoopSource {order = 0, {port = 2407,
	            callout = _ZL20notify_port_callbackP12__CFMachPortPvlS1_}}
	        CFRunLoopSource {order = 0, {port = 1c03,
	            callout = __IOHIDEventSystemClientAvailabilityCallback}}
	        CFRunLoopSource {order = 0, {port = 1b03,
	            callout = __IOHIDEventSystemClientQueueCallback}}
	        CFRunLoopSource {order = 1, {port = 1903,
	            callout = __IOMIGMachPortPortCallback}}
	 
	        // Ovserver
	        CFRunLoopObserver {order = -2147483647, activities = 0x1, // Entry
	            callout = _wrapRunLoopWithAutoreleasePoolHandler}
	        CFRunLoopObserver {order = 0, activities = 0x20,          // BeforeWaiting
	            callout = _UIGestureRecognizerUpdateObserver}
	        CFRunLoopObserver {order = 1999000, activities = 0xa0,    // BeforeWaiting | Exit
	            callout = _afterCACommitHandler}
	        CFRunLoopObserver {order = 2000000, activities = 0xa0,    // BeforeWaiting | Exit
	            callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv}
	        CFRunLoopObserver {order = 2147483647, activities = 0xa0, // BeforeWaiting | Exit
	            callout = _wrapRunLoopWithAutoreleasePoolHandler}
	 
	        // Timer
	        CFRunLoopTimer {firing = No, interval = 3.1536e+09, tolerance = 0,
	            next fire date = 453098071 (-4421.76019 @ 96223387169499),
	            callout = _ZN2CAL14timer_callbackEP16__CFRunLoopTimerPv (QuartzCore.framework)}
	    },
	 
	    modes ＝ {
	        CFRunLoopMode  {
	            sources0 =  { /* same as 'common mode items' */ },
	            sources1 =  { /* same as 'common mode items' */ },
	            observers = { /* same as 'common mode items' */ },
	            timers =    { /* same as 'common mode items' */ },
	        },
	 
	        CFRunLoopMode  {
	            sources0 =  { /* same as 'common mode items' */ },
	            sources1 =  { /* same as 'common mode items' */ },
	            observers = { /* same as 'common mode items' */ },
	            timers =    { /* same as 'common mode items' */ },
	        },
	 
	        CFRunLoopMode  {
	            sources0 = {
	                CFRunLoopSource {order = 0, {
	                    callout = FBSSerialQueueRunLoopSourceHandler}}
	            },
	            sources1 = (null),
	            observers = {
	                CFRunLoopObserver >{activities = 0xa0, order = 2000000,
	                    callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv}
	            )},
	            timers = (null),
	        },
	 
	        CFRunLoopMode  {
	            sources0 = {
	                CFRunLoopSource {order = -1, {
	                    callout = PurpleEventSignalCallback}}
	            },
	            sources1 = {
	                CFRunLoopSource {order = -1, {
	                    callout = PurpleEventCallback}}
	            },
	            observers = (null),
	            timers = (null),
	        },
	        
	        CFRunLoopMode  {
	            sources0 = (null),
	            sources1 = (null),
	            observers = (null),
	            timers = (null),
	        }
	    }
	}


	## Section 4. RunLoop 的回调 ##

	{
	    /// 1. 通知Observers，即将进入RunLoop
	    /// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();
	    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);
	    do {
	 
	        /// 2. 通知 Observers: 即将触发 Timer 回调。
	        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);
	        /// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。
	        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);
	        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);
	 
	        /// 4. 触发 Source0 (非基于port的) 回调。
	        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);
	        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);
	 
	        /// 6. 通知Observers，即将进入休眠
	        /// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();
	        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);
	 
	        /// 7. sleep to wait msg.
	        mach_msg() -> mach_msg_trap();
	        
	 
	        /// 8. 通知Observers，线程被唤醒
	        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);
	 
	        /// 9. 如果是被Timer唤醒的，回调Timer
	        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);
	 
	        /// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block
	        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);
	 
	        /// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件
	        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);
	 
	 
	    } while (...);
	 
	    /// 10. 通知Observers，即将退出RunLoop
	    /// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();
	    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);
	}

[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
