---
layout: post
title:  GCD
date:   2015-08-13-20:17:20
categories: jekyll update
---

	GCD 理解
	<http://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1>
	<http://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-2>


#### 1. 什么是GCD
	
	GCD 是 libdispatch 的市场名称，而 libdispatch 作为 Apple 的一个库，为并发代码在多核硬件（跑 iOS 或 OS X ）上执行提供有力支持。它具有以下优点：

	GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能。
	GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱。
	GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。

#### 2. GCD术语

	Serial vs. Concurrent 串行 vs. 并发
	Synchronous vs. Asynchronous 同步 vs. 异步
	Critical Section 临界区
	Race Condition 竞态条件
	Deadlock 死锁
	Thread Safe 线程安全
	Context Switch 上下文切换
	Concurrency vs Parallelism 并发与并行
	Queues 队列
	Serial Queues 串行队列
	Concurrent Queues 并发队列
	Queue Types 队列类型

#### 3. Queue Types 队列类型

	首先，系统提供给你一个叫做 主队列（main queue） 的特殊队列。和其它串行队列一样，这个队列中的任务一次只能执行一个。然而，它能保证所有的任务都在主线程执行，而主线程是唯一可用于更新 UI 的线程。这个队列就是用于发生消息给 UIView 或发送通知的。

	系统同时提供给你好几个并发队列。它们叫做 全局调度队列（Global Dispatch Queues） 。目前的四个全局队列有着不同的优先级：background、low、default 以及 high。要知道，Apple 的 API 也会使用这些队列，所以你添加的任何任务都不会是这些队列中唯一的任务。

	最后，你也可以创建自己的串行队列或并发队列。这就是说，至少有五个队列任你处置：主队列、四个全局调度队列，再加上任何你自己创建的队列。

	以上是调度队列的大框架！

	GCD 的“艺术”归结为选择合适的队列来调度函数以提交你的工作。体验这一点的最好方式是走一遍下边的列子，我们沿途会提供一些一般性的建议


#### 4. dispatch_async

	dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{ // 1
        	UIImage *overlayImage = [self faceOverlayImageFromImage:_image];
        	dispatch_async(dispatch_get_main_queue(), ^{ // 2
            		[self fadeInNewImage:overlayImage]; // 3
        	});
    	});

    	As mentioned above, dispatch_async appends a block onto a queue and returns immediately. The task will then be executed at some later time as decided by GCD. Use dispatch_async when you need to perform a network-based or CPU intensive task in the background and not block the current thread.
	
	Here’s a quick guide of how and when to use the various queue types with dispatch_async:

	a. Custom Serial Queue: A good choice when you want to perform background work serially and track it. This eliminates resource contention since you know only one task at a time is executing. Note that if you need the data from a method, you must inline another block to retrieve it or consider using dispatch_sync.

	b. Main Queue (Serial): This is a common choice to update the UI after completing work in a task on a concurrent queue. To do this, you’ll code one block inside another. As well, if you’re in the main queue and call dispatch_async targeting the main queue, you can guarantee that this new task will execute sometime after the current method finishes.

	c. Concurrent Queue: This is a common choice to perform non-UI work in the background.

#### 5. dispatch_after

	double delayInSeconds = 1.0;
	dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC)); // 1 
	dispatch_after(popTime, dispatch_get_main_queue(), ^(void){ // 2 

	});

	Wondering when it’s appropriate to use dispatch_after?
	a. Custom Serial Queue: Use caution when using dispatch_after on a custom serial queue. You’re better off sticking to the main queue.
	b. Main Queue (Serial): This is a good choice for dispatch_after; Xcode has a nice autocomplete template for this.
	c. Concurrent Queue: Use caution when using dispatch_after on custom concurrent queues; it’s rare that you’ll do this. Stick to the main queue for these operations.

#### 6. dispatch_once
	
	static PhotoManager *sharedPhotoManager = nil;
	static dispatch_once_t onceToken;
	dispatch_once(&onceToken, ^{
		sharedPhotoManager = [[PhotoManager alloc] init];
		sharedPhotoManager->_photosArray = [NSMutableArray array];
	});
	return sharedPhotoManager;

	dispatch_once() executes a block once and only once in a thread safe manner. Different threads that try to access the critical section — the code passed to dispatch_once — while a thread is already in this section are blocked until the critical section completes.

	It should be noted that this just makes access to the shared instance thread safe. It does not make the class thread safe, necessarily. You could still have other critical sections in the class, for instance anything that manipulates internal data. Those would need to be made thread safe in other ways, such as synchronising access to the data

#### 7. dispatch_barrier_async (处理读者与写者问题)

	线程安全实例不是处理单例时的唯一问题。如果单例属性表示一个可变对象，那么你就需要考虑是否那个对象自身线程安全。

	如果问题中的这个对象是一个 Foundation 容器类，那么答案是——“很可能不安全”！Apple 维护一个有用且有些心寒的列表，众多的 Foundation 类都不是线程安全的。 NSMutableArray，已用于你的单例，正在那个列表里休息。

	虽然许多线程可以同时读取 NSMutableArray 的一个实例而不会产生问题，但当一个线程正在读取时让另外一个线程修改数组就是不安全的。你的单例在目前的状况下不能预防这种情况的发生

	- (void)addPhoto:(Photo *)photo
	{
	    if (photo) { // 1
	        dispatch_barrier_async(self.concurrentPhotoQueue, ^{ // 2 
	            [_photosArray addObject:photo]; // 3
	            dispatch_async(dispatch_get_main_queue(), ^{ // 4
	                [self postContentAddedNotification]; 
	            });
	        });
	    }
	}

	你新写的函数是这样工作的：
	在执行下面所有的工作前检查是否有合法的相片。
	添加写操作到你的自定义队列。当临界区在稍后执行时，这将是你队列中唯一执行的条目。
	这是添加对象到数组的实际代码。由于它是一个障碍 Block ，这个 Block 永远不会同时和其它 Block 一起在 concurrentPhotoQueue 中执行。
	最后你发送一个通知说明完成了添加图片。这个通知将在主线程被发送因为它将会做一些 UI 工作，所以在此为了通知，你异步地调度另一个任务到主线程。

	- (NSArray *)photos
	{
	    __block NSArray *array; // 1
	    dispatch_sync(self.concurrentPhotoQueue, ^{ // 2
	        array = [NSArray arrayWithArray:_photosArray]; // 3
	    });
	    return array;
	}

	这就是你的读函数。按顺序看看编过号的注释，有这些：
	__block 关键字允许对象在 Block 内可变。没有它，array 在 Block 内部就只是只读的，你的代码甚至不能通过编译。
	在 concurrentPhotoQueue 上同步调度来执行读操作。
	将相片数组存储在 array 内并返回它。

	+ (instancetype)sharedManager
	{
	    static PhotoManager *sharedPhotoManager = nil;
	    static dispatch_once_t onceToken;
	    dispatch_once(&onceToken, ^{
	        sharedPhotoManager = [[PhotoManager alloc] init];
	        sharedPhotoManager->_photosArray = [NSMutableArray array];

	        // ADD THIS:
	        sharedPhotoManager->_concurrentPhotoQueue = dispatch_queue_create("com.selander.GooglyPuff.photoQueue",
	                                                    DISPATCH_QUEUE_CONCURRENT); 
	    });

	    return sharedPhotoManager;
	}
	这里使用 dispatch_queue_create 初始化 concurrentPhotoQueue 为一个并发队列。第一个参数是反向DNS样式命名惯例；确保它是描述性的，将有助于调试。第二个参数指定你的队列是串行还是并发

	Dispatch barriers are a group of functions acting as a serial-style bottleneck when working with concurrent queues. Using GCD’s barrier API ensures that the submitted block is the only item executed on the specified queue for that particular time. This means that all items submitted to the queue prior to the dispatch barrier must complete before the block will execute.
	When the block’s turn arrives, the barrier executes the block and ensures that the queue does not execute any other blocks during that time. Once finished, the queue returns to its default implementation. GCD provides both synchronous and asynchronous barrier functions

	Notice how in normal operation the queue acts just like a normal concurrent queue. But when the barrier is executing, it essentially acts like a serial queue. That is, the barrier is the only thing executing. After the barrier finishes, the queue goes back to being a normal concurrent queue.
	
	Here’s when you would — and wouldn’t — use barrier functions:
	
	a. Custom Serial Queue: A bad choice here; barriers won’t do anything helpful since a serial queue executes one operation at a time anyway.
	
	b. Global Concurrent Queue: Use caution here; this probably isn’t the best idea since other systems might be using the queues and you don’t want to monopolize them for your own purposes.
	
	c. Custom Concurrent Queue: This is a great choice for atomic or critical areas of code. Anything you’re setting or instantiating that needs to be thread safe is a great candidate for a barrier.
	
	Since the only decent choice above is the custom concurrent queue, you’ll need to create one of your own to handle your barrier function and separate the read and write functions. The concurrent queue will allow multiple read operations simultaneously.


#### 8. dispatch_sync

	a. Custom Serial Queue: Be VERY careful in this situation; if you’re running in a queue and call dispatch_sync targeting the same queue, you will definitely create a deadlock.
	b. Main Queue (Serial): Be VERY careful for the same reasons as above; this situation also has potential for a deadlock condition.
	c. Concurrent Queue: This is a good candidate to sync work through dispatch barriers or when waiting for a task to complete so you can perform further processing.

#### 9. dispatch_group_t

	a. dispatch_group_wait

	The first one, dispatch_group_wait, is a function that blocks your current thread and waits until either all the tasks in the group have completed, or until a timeout occurs. This is exactly what you want in this case.

	dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{ // 1
 
        __block NSError *error;
        dispatch_group_t downloadGroup = dispatch_group_create(); // 2
 
        for (NSInteger i = 0; i < 3; i++) {
            NSURL *url;
            switch (i) {
                case 0:
                    url = [NSURL URLWithString:kOverlyAttachedGirlfriendURLString];
                    break;
                case 1:
                    url = [NSURL URLWithString:kSuccessKidURLString];
                    break;
                case 2:
                    url = [NSURL URLWithString:kLotsOfFacesURLString];
                    break;
                default:
                    break;
            }
 
            dispatch_group_enter(downloadGroup); // 3
            Photo *photo = [[Photo alloc] initwithURL:url
                                  withCompletionBlock:^(UIImage *image, NSError *_error) {
                                      if (_error) {
                                          error = _error;
                                      }
                                      dispatch_group_leave(downloadGroup); // 4
                                  }];
 
            [[PhotoManager sharedManager] addPhoto:photo];
        }
        dispatch_group_wait(downloadGroup, DISPATCH_TIME_FOREVER); // 5
        dispatch_async(dispatch_get_main_queue(), ^{ // 6
            if (completionBlock) { // 7
                completionBlock(error);
            }
        });
    	});
    
    	5. dispatch_group_wait waits until either all of the tasks are complete or until the time expires. If the time expires before all events complete, the function will return a non-zero result. You could put this into a conditional block to check if the waiting period expired; however, in this case you specified for it to wait forever by supplying DISPATCH_TIME_FOREVER. This means, unsurprisingly, it’ll wait, forever! That’s fine, because the completion of the photos creation will always complete
    	

	b. dispatch_group_notify

	__block NSError *error;
	dispatch_group_t downloadGroup = dispatch_group_create(); 

	for (NSInteger i = 0; i < 3; i++) {
	NSURL *url;
	switch (i) {
	    case 0:
	        url = [NSURL URLWithString:kOverlyAttachedGirlfriendURLString];
	        break;
	    case 1:
	        url = [NSURL URLWithString:kSuccessKidURLString];
	        break;
	    case 2:
	        url = [NSURL URLWithString:kLotsOfFacesURLString];
	        break;
	    default:
	        break;
	}

	dispatch_group_enter(downloadGroup); // 2
	Photo *photo = [[Photo alloc] initwithURL:url
	                      withCompletionBlock:^(UIImage *image, NSError *_error) {
	                          if (_error) {
	                              error = _error;
	                          }
	                          dispatch_group_leave(downloadGroup); // 3
	                      }];

	[[PhotoManager sharedManager] addPhoto:photo];
	}

	dispatch_group_notify(downloadGroup, dispatch_get_main_queue(), ^{ // 4
		if (completionBlock) {
	    		completionBlock(error);
		}
	});

	4. dispatch_group_notify serves as the asynchronous completion block. This code executes when there are no more items left in the dispatch group and it’s the completion block’s turn to run. You also specify on which queue to run your completion code, here, the main queue is the one you want.


#### 9. dispatch_apply
	
	dispatch_apply acts like a for loop which executes different iterations concurrently. This function is sychronous, so just like a normal for loop, dispatch_apply returns only when all of the work is done.



[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
