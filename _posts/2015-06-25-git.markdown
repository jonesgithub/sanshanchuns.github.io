---
layout: post
title:  "git"
date:   2015-06-25 12:42:26
categories: jekyll update
---

#### 1. 关于 .gitignore 文件

	文档
	git clone git@github.com:github/gitignore.git

---

	# Xcode
	#
	# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

	## Build generated
	build/
	DerivedData

	## Various settings
	*.pbxuser
	!default.pbxuser
	*.mode1v3
	!default.mode1v3
	*.mode2v3
	!default.mode2v3
	*.perspectivev3
	!default.perspectivev3
	xcuserdata

	## Other
	*.xccheckout
	*.moved-aside
	*.xcuserstate
	*.xcscmblueprint

	## Obj-C/Swift specific
	*.hmap
	*.ipa

	# CocoaPods
	#
	# We recommend against adding the Pods directory to your .gitignore. However
	# you should judge for yourself, the pros and cons are mentioned at:
	# http://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
	#
	#Pods/

	# Carthage
	#
	# Add this line if you want to avoid checking in source code from Carthage dependencies.
	# Carthage/Checkouts

	Carthage/Build

---

	I have a repository with a file Hello.java. When I compile it an additional Hello.class file is generated.
	I created an entry for Hello.class in a .gitignore file. However the file still appears to be tracked.
	I want to know how to make git ignore Hello.class.
	The problem is that .gitignore ignores just files that weren't tracked before (by git add). Run git rm --cached name_of_file and your file will be ignored again (in case it's mentioned in .gitignore).

	git rm --cached name_of_file  #删除缓存中已经追踪的文件, .gitignore 就会生效 


#### 2. 关于 .gitconfig 文件

	[user]
		name = your_name
		email = your_email
	[color]
		diff = auto
		status = auto
		branch = auto
		interactive = true
		ui = true
	[alias]
		hist = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
		co = checkout
		ci = commit
		st = status
		br = branch
		type = cat-file -t
		dump = cat-file -p
	[core]
		autocrlf = false
	[http]
		postBuffer = 2M
	[push]
		default = matching


#### 3. 关于 oh my zsh  - 好用的命令行终端

	如何安装?终端中输入
	curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh


#### 4. gitlab 服务器
	
	对于公司内网的 git 服务器, gitlab 是大概是业界第一的, 地址看这里<https://github.com/gitlabhq/gitlabhq>
	一台 ubuntu 的机器, 追加 bitnami.com 他们家的 一键安装包 <https://bitnami.com/stack/gitlab>, 就是一台完美的本地源码服务器
	当然也可以部署在类似 GCP, AWS 等云服务器上
	

#### 5. git 常用命令
	
	git add .
	git commit -m"your comment about this commit"
	git pull origin master  //拉取远程仓库
	git pull --rebase origin master //先拉取远程仓库, 再并上当前的修改提交
	git push origin master //推送到远程仓库
	git merge branch //合并branch到当前分支
	git branch -D master  //删除分支
	git checkout -b new_branch //创建新分支
	git clean -f  //删除没有追踪的文件
	git rm --cached file_path  //.gitignore 中已经忽略对应文件, 但已经被追踪





[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
