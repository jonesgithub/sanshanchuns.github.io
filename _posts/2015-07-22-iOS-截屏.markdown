---
layout: post
title:  截屏
date:   2015-07-22-16:00:54
categories: jekyll update
---

#### 1. 截屏, 但是这个截屏不能包括键盘
	
	Might be you will need to snapshot a particular view into an image. Previously we do like this:

	#import <QuartzCore/QuartzCore.h>

	UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, 0);
	[view.layer renderInContext:UIGraphicsGetCurrentContext()];

	UIImage *copied = UIGraphicsGetImageFromCurrentImageContext();
	UIGraphicsEndImageContext();

	On iOS 7 there's an updated API that is much faster:

	UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, 0);
	[view drawViewHierarchyInRect:view.bounds afterScreenUpdates:YES];
	UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();
	UIGraphicsEndImageContext();
	return snapshot;

	How efficient is the faster API? It is about 1.8x faster on iPhone 5. Time elapsed was down from 90ms to 50ms.
	If you want to create a view already drawn with the image, we can use an even more handy API:

	UIView *newView = [view snapshotViewAfterScreenUpdates:YES];


#### 2. 包括键盘的截屏 UIView+snapshot.m

	- (UIImage *)snapshot{
	    
	    UIWindow *keyboard = nil;
	    for (UIWindow *window in [[UIApplication sharedApplication] windows])
	    {
	        if ([[window description] hasPrefix:@"<UITextEffectsWin"])
	        {
	            keyboard = window;
	            break;
	        }
	    }
	    
	    CGSize size =  [[UIScreen mainScreen] bounds].size;
	    UIGraphicsBeginImageContext(size);
	    CGContextRef context=UIGraphicsGetCurrentContext();
	    // delete following line if you only want the keyboard
	    [[self layer] renderInContext:context];
	    if(keyboard!=nil) [[keyboard layer] renderInContext:context];
	    UIImage *screenImg = UIGraphicsGetImageFromCurrentImageContext();
	    UIGraphicsEndImageContext();
	    
	    return screenImg;
	}

	- (void)blur{
	    self.userInteractionEnabled = NO;
	    
	    UIImage *blurredImage = [[self snapshot] blur];
	    UIImageView *imageView = [[UIImageView alloc] initWithFrame:self.bounds];
	    imageView.tag = -1;
	    imageView.image = blurredImage;
	    [self addSubview:imageView];
	    for (UIWindow *window in [[UIApplication sharedApplication] windows]) {
	        if ([[window description] hasPrefix:@"<UITextEffectsWin"]) {
	            window.hidden = YES;
	        }
	    }
	}

	-(void)unBlur{
	    [[self viewWithTag:-1] removeFromSuperview];
	    for (UIWindow *window in [[UIApplication sharedApplication] windows]) {
	        if ([[window description] hasPrefix:@"<UITextEffectsWin"]) {
	            window.hidden = NO;
	        }
	    }
	    self.userInteractionEnabled = YES;
	}

	-(BOOL)blurred{
	    if ([self viewWithTag:-1]) {
	        return YES;
	    } else {
	        return NO;
	    }
	}


#### 3. 图像模糊 UIImage+blur.m

	- (UIImage *)blur{
	    CIContext *context = [CIContext contextWithOptions:nil];
	    
	    CIImage *inputImage = [CIImage imageWithCGImage:self.CGImage];
	    CIFilter *filter = [CIFilter filterWithName: @"CIGaussianBlur"];
	    [filter setValue:inputImage forKey:kCIInputImageKey];
	    [filter setValue:[NSNumber numberWithFloat: 6] forKey: @"inputRadius"];
	    CIImage *resultImage = [filter valueForKey:kCIOutputImageKey];
	    CGImageRef cgImage = [context createCGImage:resultImage fromRect:[inputImage extent]];
	    UIImage *blurredImage = [UIImage imageWithCGImage:cgImage];
	    CGImageRelease(cgImage);
	    return blurredImage;
	}

#### 4. 更好的截屏方法

	+ (UIImage *)screenshotUsingContext:(BOOL)useContext
	{
		// Create a graphics context with the target size
		UIGraphicsBeginImageContextWithOptions([[UIScreen mainScreen] bounds].size, NO, 0);

		CGContextRef context = UIGraphicsGetCurrentContext();

		// Iterate over every window from back to front
		for (UIWindow *window in [[UIApplication sharedApplication] windows])
		{
		if ((![window respondsToSelector:@selector(screen)] || [window screen] == [UIScreen mainScreen]) && window.tag != MZFormSheetControllerWindowTag && ![window isKindOfClass:[MZFormSheetBackgroundWindow class]] && window.bounds.size.width > 0 && window.bounds.size.height > 0)
		{
		    // -renderInContext: renders in the coordinate space of the layer,
		    // so we must first apply the layer's geometry to the graphics context
		    CGContextSaveGState(context);
		    // Center the context around the window's anchor point
		    CGContextTranslateCTM(context, [window center].x, [window center].y);
		    // Apply the window's transform about the anchor point
		    CGContextConcatCTM(context, [window transform]);
		    // Offset by the portion of the bounds left of and above the anchor point
		    CGContextTranslateCTM(context,
		                          -[window bounds].size.width * [[window layer] anchorPoint].x,
		                          -[window bounds].size.height * [[window layer] anchorPoint].y);

		    if (useContext) {
		        // Render the layer hierarchy to the current context
		        [[window layer] renderInContext:context];
		    } else {
		        if ([window respondsToSelector:@selector(drawViewHierarchyInRect:afterScreenUpdates:)]) {
		            [window drawViewHierarchyInRect:window.bounds afterScreenUpdates:NO];
		        } else {
		            [[window layer] renderInContext:context];
		        }
		    }


		    // Restore the context
		    CGContextRestoreGState(context);
		}
		}

		// Retrieve the screenshot image
		UIImage *image = UIGraphicsGetImageFromCurrentImageContext();

		UIGraphicsEndImageContext();

		return image;
	}


#### 5. 更好的模糊方法

	- (UIImage *)blurredImageWithRadius:(CGFloat)blurRadius tintColor:(UIColor *)tintColor saturationDeltaFactor:(CGFloat)saturationDeltaFactor maskImage:(UIImage *)maskImage
	{
	    // Check pre-conditions.
	    if (self.size.width < 1 || self.size.height < 1) {
	        NSLog (@"*** error: invalid size: (%.2f x %.2f). Both dimensions must be >= 1: %@", self.size.width, self.size.height, self);
	        return nil;
	    }
	    if (!self.CGImage) {
	        NSLog (@"*** error: image must be backed by a CGImage: %@", self);
	        return nil;
	    }
	    if (maskImage && !maskImage.CGImage) {
	        NSLog (@"*** error: maskImage must be backed by a CGImage: %@", maskImage);
	        return nil;
	    }

	    CGRect imageRect = { CGPointZero, self.size };
	    UIImage *effectImage = self;

	    BOOL hasBlur = blurRadius > __FLT_EPSILON__;
	    BOOL hasSaturationChange = fabs(saturationDeltaFactor - 1.) > __FLT_EPSILON__;
	    if (hasBlur || hasSaturationChange) {
	        UIGraphicsBeginImageContextWithOptions(self.size, NO, [[UIScreen mainScreen] scale]);
	        CGContextRef effectInContext = UIGraphicsGetCurrentContext();
	        CGContextScaleCTM(effectInContext, 1.0, -1.0);
	        CGContextTranslateCTM(effectInContext, 0, -self.size.height);
	        CGContextDrawImage(effectInContext, imageRect, self.CGImage);

	        vImage_Buffer effectInBuffer;
	        effectInBuffer.data     = CGBitmapContextGetData(effectInContext);
	        effectInBuffer.width    = CGBitmapContextGetWidth(effectInContext);
	        effectInBuffer.height   = CGBitmapContextGetHeight(effectInContext);
	        effectInBuffer.rowBytes = CGBitmapContextGetBytesPerRow(effectInContext);

	        UIGraphicsBeginImageContextWithOptions(self.size, NO, [[UIScreen mainScreen] scale]);
	        CGContextRef effectOutContext = UIGraphicsGetCurrentContext();
	        vImage_Buffer effectOutBuffer;
	        effectOutBuffer.data     = CGBitmapContextGetData(effectOutContext);
	        effectOutBuffer.width    = CGBitmapContextGetWidth(effectOutContext);
	        effectOutBuffer.height   = CGBitmapContextGetHeight(effectOutContext);
	        effectOutBuffer.rowBytes = CGBitmapContextGetBytesPerRow(effectOutContext);

	        if (hasBlur) {
	            // A description of how to compute the box kernel width from the Gaussian
	            // radius (aka standard deviation) appears in the SVG spec:
	            // http://www.w3.org/TR/SVG/filters.html#feGaussianBlurElement
	            //
	            // For larger values of 's' (s >= 2.0), an approximation can be used: Three
	            // successive box-blurs build a piece-wise quadratic convolution kernel, which
	            // approximates the Gaussian kernel to within roughly 3%.
	            //
	            // let d = floor(s * 3*sqrt(2*pi)/4 + 0.5)
	            //
	            // ... if d is odd, use three box-blurs of size 'd', centered on the output pixel.
	            //
	            CGFloat inputRadius = blurRadius * [[UIScreen mainScreen] scale];
	            uint32_t radius = floor(inputRadius * 3. * sqrt(2 * M_PI) / 4 + 0.5);
	            if (radius % 2 != 1) {
	                radius += 1; // force radius to be odd so that the three box-blur methodology works.
	            }
	            vImageBoxConvolve_ARGB8888(&effectInBuffer, &effectOutBuffer, NULL, 0, 0, radius, radius, 0, kvImageEdgeExtend);
	            vImageBoxConvolve_ARGB8888(&effectOutBuffer, &effectInBuffer, NULL, 0, 0, radius, radius, 0, kvImageEdgeExtend);
	            vImageBoxConvolve_ARGB8888(&effectInBuffer, &effectOutBuffer, NULL, 0, 0, radius, radius, 0, kvImageEdgeExtend);
	        }
	        BOOL effectImageBuffersAreSwapped = NO;
	        if (hasSaturationChange) {
	            CGFloat s = saturationDeltaFactor;
	            CGFloat floatingPointSaturationMatrix[] = {
	                0.0722 + 0.9278 * s,  0.0722 - 0.0722 * s,  0.0722 - 0.0722 * s,  0,
	                0.7152 - 0.7152 * s,  0.7152 + 0.2848 * s,  0.7152 - 0.7152 * s,  0,
	                0.2126 - 0.2126 * s,  0.2126 - 0.2126 * s,  0.2126 + 0.7873 * s,  0,
	                0,                    0,                    0,  1,
	            };
	            const int32_t divisor = 256;
	            NSUInteger matrixSize = sizeof(floatingPointSaturationMatrix)/sizeof(floatingPointSaturationMatrix[0]);
	            int16_t saturationMatrix[matrixSize];
	            for (NSUInteger i = 0; i < matrixSize; ++i) {
	                saturationMatrix[i] = (int16_t)roundf(floatingPointSaturationMatrix[i] * divisor);
	            }
	            if (hasBlur) {
	                vImageMatrixMultiply_ARGB8888(&effectOutBuffer, &effectInBuffer, saturationMatrix, divisor, NULL, NULL, kvImageNoFlags);
	                effectImageBuffersAreSwapped = YES;
	            }
	            else {
	                vImageMatrixMultiply_ARGB8888(&effectInBuffer, &effectOutBuffer, saturationMatrix, divisor, NULL, NULL, kvImageNoFlags);
	            }
	        }
	        if (!effectImageBuffersAreSwapped)
	            effectImage = UIGraphicsGetImageFromCurrentImageContext();
	        UIGraphicsEndImageContext();

	        if (effectImageBuffersAreSwapped)
	            effectImage = UIGraphicsGetImageFromCurrentImageContext();
	        UIGraphicsEndImageContext();
	    }

	    // Set up output context.
	    UIGraphicsBeginImageContextWithOptions(self.size, NO, [[UIScreen mainScreen] scale]);
	    CGContextRef outputContext = UIGraphicsGetCurrentContext();
	    CGContextScaleCTM(outputContext, 1.0, -1.0);
	    CGContextTranslateCTM(outputContext, 0, -self.size.height);

	    // Draw base image.
	    CGContextDrawImage(outputContext, imageRect, self.CGImage);

	    // Draw effect image.
	    if (hasBlur) {
	        CGContextSaveGState(outputContext);
	        if (maskImage) {
	            CGContextClipToMask(outputContext, imageRect, maskImage.CGImage);
	        }
	        CGContextDrawImage(outputContext, imageRect, effectImage.CGImage);
	        CGContextRestoreGState(outputContext);
	    }

	    // Add in color tint.
	    if (tintColor) {
	        CGContextSaveGState(outputContext);
	        CGContextSetFillColorWithColor(outputContext, tintColor.CGColor);
	        CGContextFillRect(outputContext, imageRect);
	        CGContextRestoreGState(outputContext);
	    }

	    // Output image is ready.
	    UIImage *outputImage = UIGraphicsGetImageFromCurrentImageContext();
	    UIGraphicsEndImageContext();
	    
	    return outputImage;
	}


[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
