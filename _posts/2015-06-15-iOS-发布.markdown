---
layout: post
title:  "iOS 发布"
date:   2015-06-06 12:42:26
categories: jekyll update
---

#### 1. xcodebuild 苹果的编译命令

	https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html


	NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];
	NSString *build = [[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString *)kCFBundleVersionKey];

#### 2. facebook 的 xctool 是 xcodebuild 命令的改良版

	xctool -workspace licaishi.xcworkspace -scheme licaishi -configuration Release

#### 3. 只有打包是不行的, 最终的目标还是要给到测试同学, 那么 fir.im 就是不错的选择, 去他们官网搞起来吧

	确定ruby 环境统一, 比如使用 rvm use 2.1.2    (指定使用 2.1.2 版本)
	sudo gem install fir-cli --no-ri --no-rdoc

	fir upgrade    (更新fir)

	fir login   (登录fir账号)
	输入 对应账号的 token

	fir build_ipa . -q -o . -p    (编译当前目录(安静模式), ipa文件输入在当前目录, 最后发布)
	fir build_ipa . -o . -p  (非安静模式)

	fir b . -w -S [your scheme] #编译 -w 表示编译 xcworkspace, 这里xcode需要指定 InHouse 的企业证书($299)
	fir login
	fir p build_ipa/[your scheme].ipa #发布到 fir.im, 测试同学可以下载拉

#### 4. 默认 fir 使用 xcode 所选签名, 那么 fir命令 如何指定包的签名呢? 每次都要xcode切换签名肯定灰常麻烦.

	fir b . -w -C Release -S licaishi CODE_SIGN_IDENTITY="iPhone Distribution: Shanghai Noah Yijie Financial Tech Co., Ltd." -p
	如此一来一条指令急速发布

#### 5. 点菜命令

	curl "http://10.21.200.75:99/dinner/order" -H "Pragma: no-cache" -H "Origin: http://10.21.200.75:99" -H "Accept-Encoding: gzip, deflate" -H "Accept-Language: zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2" -H "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Accept: application/json, text/javascript, */*; q=0.01" -H "Cache-Control: no-cache" -H "X-Requested-With: XMLHttpRequest" -H "Connection: keep-alive" -H "Referer: http://10.21.200.75:99/" --data "no=5573&shop=3" --compressed

#### 6. iOS 推送
	
	推送看这里 <http://blog.csdn.net/showhilllee/article/details/8631734>

	Payload就是push的消息负载，这就是应用需要关心的数据。 Payload是一个JSON字典，最大值是 256 字节，超过这个限制，APNS将拒绝转发。基本格式如下
	{
	    "aps": {
	      "alert":"Hello Push!",
	      "badge":1,
	      "sound":"default"
	    }
	}

	必须包含aps键值。badge表示应用程序图标显示的数字，sound表示收到push的提示音。 Payload的具体结构参考Apple Push Notification Service

	要在这个结构中新增自定义数据，请加在aps空间之外。比如后台推送消息给应用同时要求应用打开某个页面：

	{
	    "aps": {
	      "alert":"Hello Push!",
	      "badge":1,
	      "sound":"default"
	    },
	    "page":"home"
	}

	后台告诉客户端收到这个push后打开应用的主页，这里的page、home都是自己定义的。必须注意的是，Payload大小不能超过限制，所以可以把自定义数据更简化点，比如可以把home与编号1对应，page简写为p，这样"p":1表示打开主页，可以缩小Payload的大小

	a. openssl x509 -in aps_development.cer -inform der -out PushChatCert.pem      //证书加密为pem
	b. openssl pkcs12 -nocerts -out PushChatKey.pem -in Push.p12                //私钥加密为pem
	c. cat PushChatCert.pem PushChatKey.pem > ck.pem                          // 证书 私钥 合并为一个加密文件
	d. telnet gateway.sandbox.push.apple.com 2195				 // 测试 development 推送
	e. openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert PushChatCert.pem -key PushChatKey.pem  //测试证书




[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
